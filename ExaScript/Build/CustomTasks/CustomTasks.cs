/* ****************************************************************************
 *
 * Copyright (c) Jeff Hardy.
 *
 * This source code is subject to terms and conditions of the Apache License, Version 2.0. A 
 * copy of the license can be found in the License.html file at the root of this distribution. If 
 * you cannot locate the  Apache License, Version 2.0, please send an email to 
 * jdhardy@gmail.com. By using this source code in any fashion, you are agreeing to be bound 
 * by the terms of the Apache License, Version 2.0.
 *
 * You must not remove this notice, or any other, from this software.
 *
 *
 * ***************************************************************************/

using System;
using System.IO;
using Microsoft.Build.Framework;
using Microsoft.Build.Utilities;

namespace CustomTasks
{
    public class FormatString : Task
    {
        [Required]
        public string Format { get; set; }

        public string[] Args { get; set; }

        [Output]
        public string Result { get; private set; }

        public override bool Execute()
        {
            Result = string.Format(Format, Args);
            return true;
        }
    }

    public class CurrentTime : Task {
        public string Format { get; set; }

        [Output]
        public string Result { get; private set; }

        public override bool Execute() {
            var now = DateTime.Now;
            Result = string.IsNullOrEmpty(Format) ? now.ToString() : now.ToString(Format);

            return true;
        }
    }

    public class FormatTemplate : Task {
        const string CsHeader = @"/*
 * This code was generated by FormatTemplate as part of the build process. Do not edit it.
 *
 * Generated on {0:yyyy-MM-dd hh:mm:ss}.
 *
 */

";
        
        [Required]
        public ITaskItem TemplateFile { get; set; }

        [Required]
        public ITaskItem OutputFile { get; set; }

        public string[] Parameters { get; set; }
        
        public string FileType { get; set; }

        public override bool Execute() {
            var template = File.ReadAllText(TemplateFile.ItemSpec);

            var type = (FileType ?? "").ToLower();
            string header = "";
            switch(type) {
                case "xml":
                    break;

                default:
                    header = CsHeader;
                    break;
            }

            var result = string.Format(header, DateTime.Now)
                + string.Format(template, Parameters);

            Directory.CreateDirectory(Path.GetDirectoryName(OutputFile.ItemSpec));
            File.WriteAllText(OutputFile.ItemSpec, result);

            return true;
        }
    }
}

